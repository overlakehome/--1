#!/usr/bin/env ruby
%w{optparse open-uri JSON}.each { |e| require e }

$options = {}
OptionParser.new do |opts|
  opts.on('-s', '--skip-entries INTEGER', Integer, 'Skips processing as many entries as specified. (default: 0).') { |v| $options[:skip_count] = v }
  opts.on('-n', '--max-entries INTEGER',  Integer, 'Process as many entries as specified.') { |v| $options[:max_entries] = v }
  opts.on('-f', '--max-fields INTEGER',   Integer, 'Yields as many fields as specified (default: 12).') { |v| $options[:max_fields] = v }
  opts.on('-k', '--min-value FLOAT',      Float,   'Yields fields of values no smaller than specified (default 2.0).') { |v| $options[:min_value] = v }
end.parse!
skip_count = $options[:skip_count] || 0
max_entries = $options[:max_entries]
max_fields = $options[:max_fields] || 12
min_value = $options[:min_value] || 2.0

open(ARGV[0]) do |f|
  f.each do |l|
    next if 0 <= skip_count -= 1
    break if max_entries && 0 > max_entries -= 1
    h = JSON[l.chomp.gsub(%r(([^,{]+)\s*:), %q("\1":))].sort_by { |e| -e[1] }.
      reduce({}) { |h, e| e[1] *= 100; h[e[0].to_i] = e[1].round(1) unless e[1] < min_value || h.size >= max_fields; h }
    j [f.lineno, h] unless h.empty?
  end
end
